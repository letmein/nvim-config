# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby
snippet #fr
	# frozen_string_literal: true
# Rspec template
snippet spec
	require "rails_helper"

	RSpec.describe ${1} do
		describe "${2}" do
			${3}
		end
	end
# Rspec "describe" block
snippet des
	describe "${1}" do
		${2}
	end
# Rspec "it" block
snippet it
	it "${1}" do
		${2}
	end
#  expect().to 
snippet exp
	expect(${1}).to ${2}
snippet con
	context "${1}" do
		${2}
	end
# Rspec "before" block
snippet bef
	before do
		${1}
	end
# New Block
snippet =b
	=begin rdoc
		${1}
	=end
snippet y
	:yields: ${1:arguments}
snippet rb
	#!/usr/bin/env ruby -wKU
snippet beg
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end
snippet req
	require "${1}"${2}
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet for
	for ${1:e} in ${2:c}
		${3}
	end		
snippet until
	until ${1:condition}
		${2}
	end
snippet cla
	class ${1:Foo}

		def initialize(${2})
			${3}
		end

	end
# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
# def self
snippet defs
	def self.${1:class_method_name}
		${2}
	end
# def method_missing
snippet file File.read()
	File.read(${1:"path/to/file"})${2}
snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
snippet map
	map { |${1:e}| ${2} }
snippet do
	do |${1:variable}|
		${2}
	end
snippet let
	let(:${1}) { ${2} }
snippet letd
	let(:${1}) do
		${2}
	end
snippet expect
	expect(${1}).to ${2}
snippet pry
	binding.pry

snippet jobj
	{
		type: :object,
		properties: {
			${1}
		},
		required: []
	}
snippet jty
	{ type: ${1} }
